package main

import (
	"encoding/json"
	"errors"
	"fmt"

	"github.com/golang-jwt/jwt"
)

var SECRET_KEY = []byte("wectelkomselcom")

func main() {
	// authID := "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRoSWQiOiJleUowZVhBaU9pSktWMVFpTENKaGJHY2lPaUpJVXpJMU5pSjkuZXlKaGRYUm9TVzVrWlhoV1lXeDFaU0k2SW5Cb2IyNWxURzluYVc0aUxDSnZkR3NpT2lKaU1EWXljM1YxWTI5c2EydHBObU52YXpOclpHNWhZamx3YkNJc0ltRjFkR2hKYm1SbGVGUjVjR1VpT2lKelpYSjJhV05sSWl3aWNtVmhiRzBpT2lJdmRITmxiQzl0ZVhSbGJHdHZiWE5sYkM5M1pXSWlMQ0p6WlhOemFXOXVTV1FpT2lJcVFVRktWRk5SUVVOTlJFbEJRa2hTTldOSFZVRkRSWEJZVmtZNVFsWldVa2xCUVVwVVRWRkJRMDFFUlM0cVpYbEtNR1ZZUVdsUGFVcExWakZSYVV4RFNtcGtTR3RwVDJsS1MxWXhVV2xNUTBwb1lrZGphVTlwU2tsVmVra3hUbWxLT1M1YVdHeExUVWRXV1ZGWGJGQmhWWEJNVm1wR1VtRlZlRVJUYlhocFlsVXhjRlF5YkV0UmF6RlZVMVJTVWsxRmNFVlVSbFp2VmtVeGNWWlVTa3BoV0dSd1YxWmtOR0pyYkhGaU1teGhVako0TlZOWE5IZE1hVFZvVlVVMU0xZEdiM1JqYW1nMlUxZEdObHB0YzNoVFNGWnVWa2hPUWt4dGR6TmliRVY0VlRGS1YwOVhjRzVPYTJSWVZtMXNUVlZ0ZEhkVWJFWjVZa1JhVjFGWVJsaFJibFp2WTFSS2QwMTZRbHBOVlhCTlYwVk9hMVZHUW1Gak0zQlJaREl4VUZwRlNrVlRNM0F6WTBka2JXRkVSbVpUTTNCUlkzcG9abGRxU2xkWk0xcHJVVmRLVTA5WWJIQmhSMmcyVW10T2QxSnVaRTlVVkdoUVUwWkNkMWxZU2pGYU1HUktWVEpSZWxWVlZtMVRWbHBvVld4R2VWUllSbEprUm1oRVRqRm5kMkpxVFRKYVIyczFXV3huZWxWWVZuWk9hMFYwVGxVMWVGZFZhREJoYTNoNVYxWndTMHhXYUdwUk1GWllaRWRhUzJWR1ZrZGhWVGxTVmtad2QxVkZhRXhYVnpWT1QwaHZNV1ZWTUhoaVJteHNXa1pvZUdGWFdrMWhNV2hoWVVWT1IyUlZlREppTW5neVRrYzVTMVJXUm5aVE1HUjVWVWhPVWxaNlVrTmpXRTV3V1ZSV2FGa3lkR0ZUYXpnMFZtMTBWMUpVVms1WFNHOHlWRzA0TVUwd1kzbGtNbGt4VXpGR1ZWa3liREpUVkZsM1RGZGFTMVl6Y0ZSV1JscDFURlJvZUdSck9WUmpSR3N3VDBoc2FWRnJXbXhWTTNCTVZFVXhRMWxXT1ZKVVJYaEdVVzVLU0dSWVZUTlBWVkpGVlRGS2MyUkZWakJpTW5oRFUydGFSbEV3T1dGWmVscHJaRlYwWmxaSGJEQmxiRW95VjFkNGQxUlVWa2hoVm14dFZHczFWazFGVG5STk1FVjZWRE5hV1U1NlpGUmtWMmh5VkZWb1ExTllTakprYm14VlZXNXZOVmxxUWpWaWFtUTFaRzVvZDFrd1pGTmliRkp0VlcwMWRVeFZhelZrU0d4aFlVZFdWMUZVVWs1aGJGSTBZVEZrUkU0eFpETk5NVkY0VFVkYVdWZ3dOVkJYUXpGeFdWWnNNMXB1Vm5Ka1NFSkRZa1ZaZDFVelNUQlVSV3cxVTFka2JFMVhNSFJSYld4YVZVUnNSV0Z1VW5sbFZHUkpUVEJLZVZaWVRucFZWMnhyVjBSc1dGZEZUbEpOTTBKeFUwWm9NMlZJU201aVZXUTBaRE53TlZwSVNYbGxWazVYWW1wc1JHUnJkekpSTVd4dlVqTnNXRkp0Wkc1WFYzaFNXakpaZEZZeVRuUmxSbWh6VlVWc05GRXpiR2hsU0ZwNlkydE9UVlF3ZHpCamF6VkVUa1Z3Wms5WE1VOVNRekZVVTFaWmVGSlVaekJsV0dReVltdHNkMVJ0T1hwa1dGcHJWRmhyZUZKVlJuSldSV1JJVlc1c1RWVXdkRlpOUkZKS1VXeE9OVkl4VG1wWk1HeDNVa1YwV1ZNeFduZGFWV3haVWpGa2NWWXdWbFZUVms1UVRUTkdUbVF5U21aU01taDRaVlp3ZEZSc1dtaFpiRTVLVld0S1QyTlVTVFZrVldSRlZqTkdkMVpHV2pSV1JVNUdUVmhzYjFscVJURlViRTV6VmxSR2RHSlZhek5sYlhSVlZsWlNiRlJGV2tKak1EbFJXakU1U21Oc1ozaFNhM1EyVGtWU1dFNVliRzlXZWxwUVRucGFkMk13ZEVwUlZHZDRUVWhXU2s1dVNtMU1WbHB0VXpCYWNWWXpUbk5YVnpFd1ZWWkdiRmx1U20xV1JHUndUbnBTYVZkVmVHaE5NRzk2VGpKYVIxUkdVbmhNV0VwM1lrWnJOV05GVVhoVlZsVTFWMVpTVUZwRk9UTlhSa3BzWTBoc1VVNXFUWGRPVkVweVdWWlJkRTlITVhSVmVteHFWRmh3ZDFKc2NFTmFXR1JwVG1wQ1lXTjZRbGRaTW1jelpXdDBTV0ZHYUZGVlJFcFlWRlJHTVZwV2JGZFBWMlJvVmtoT2JtRXhaM2hTUjNCMVkwaEpkRlY1TUhoWFZGWkNVMFJPZWxKWFZrVmxTR3h5WVVVMGRHUXpUakZrZWxaRVlXcE9WMDFxUms5aVZVNW9XVlZrVFZWR1ZuSlVibVI2WVhwT1RGb3pRVEZTYWxWMFZGaEtjMWRyVFhkU1ZHaFdVbXBLZG1SdGFGSk5WbkEyVkVWV1IxUkZPVWhpTW1jeFlUSlNlRmxZYkdGV01EVlBZVzVhUldOSGRETlRNbWMwVVd4d1dsUXpaRzlaYm1neFRqTkNiVTlGYkZoWFJYYzFVMjB4Y0U1c2FESk5ia3BHVjIxWmVGSnRjSHBPVlhoRVRsVTVOV0pJUm1oU00wcEhXbXc1Y0ZGc1FuWmxSMHAzVW1zNU5WbHNXbWhTTURFd1YycFZNR1JXYkZWUmJGWkNUMVZPZFZORVpEQlpNa1pFVDFkc1lVeFhOVXhXU0d4UlZVaFdabEpGVGtkUlZFcFhUbFp3VjFvemNHNVVWMmh6V1RCR1NHVlhUa2RUTURnd1dETm9lV050WkdaWGJYUlNXbFpPVEdORlRsQmxiVEV5Wld4c1YwNHdZM1JUTWpGNFlURkdNR0V5YUZGVldFSkxWRzFhYWs1cVVuQmFTRXBtWVcwNWFsbHJWakJoUnpGV1QwaHNObVJYT1VOVFZUVjRaRzB4V1dGc1VsVk5Sa0pDVWtob2JsVnRSbXhpZWswMVRVUlNjMVp0ZUZKbFNHUnhVbGQ0VFZaSWIzbE5NR3hIVGtkME1GUXlSbUZrUms0MlZFWlNjVkV3Ykd4VFZteFBVbGhvUkU1SGNHOU5ibkJOV0hwb1ZFNUdUa1JSTW14T1RUSk9NVTFHYUZwV01tODBZa2hXUkV4WWNHOU5WazAxV25wc1VGVlVhRUphVkZweVYxWlZlR1Z0WnpCT01FWlVXREl4ZEU0d1RsVmxWamxLVGpGb1ZXTnJPVVpYVkdSRFdXNXNja3hZVmtaU2JHTjBUVEJuTUZkVlpGWmxSR2QwVm14c2FsZHNhRlJqTVZwQ1kxZG9VMDlWVGpaVWJYUjBWVlZaTVZWRVpIUldWRlpLV214Tk5XRnVhRTFrUkd4d1UyNWtjMVpzVWs5a1NHUTFWMVpXVFdRd2NEUlNWbFY0VTFaT2RXUlZkSFpsYlVaNVZta3hNbEpFUVRGbGJEbFZVVzFPV1ZkWVFraFVNRGx3VGtkV1NGZEhXa3BaTWs1NFRUQXhXbUpGTVV0WFZtaDNaVVpaZDJKRk5EUldNbG95Vld0d1ptVlVVbnBVU0d0NFVYcFdRbE16UWxoWk1sRjRXV3BTYjFVeVRtRmlia0pvVFVST2FsTXlkM2hpYkZwSVpXNWFWMVZJVmtsYVZscFhWa1Y0UjJOWGFEWlpNMlJoWTBWTk0xSkViR3hoYlZad1dXMUplRlpJVW5GVE1VWklUbFZXY0ZaWVZsTlNNakZyWTI1Qk0wMHlSbFprTVd4clZEQnZOR1JYVmtwamEyeFpVWHBvZUZvd2J6QmFiRXBRVW10T1ZsRlhWa3hoU0c5NlpWZFplRlJ0VmxGaFZFWlVVVlZzTUdSdGFFTk5WVGswWWtoS2JWUlhhSEpXYWs1bVYxWTRNVkl6WkVSWk1tUTBUVEJzTkZkRVNrbE5iWEJaVFZSa2IxWnRNVWxOYlZaR1dIcEtNMU5GVGxCVFJWb3hZa1ZrYlZSWFNuRlJNRko0VjBkek1HTklWbHBoVmxwVFkxWlNlRmxWVGtkWGJWWlZXbXM1UjJWRE1VaFRia1pQVlVSa2ExWXpXVEZYYkZFMFZUTk5NRmt5T1doV2VrWnZXbFJhTUZRd1NUQlRTRlY1Wkdwc1ZGcElWVFZOYm5CMlZFVldNV0ZXYUdoV01VSmhXV3RLTmxGcWFHMWlNbEpHVjFaSk0xTnFVbGhsVlhkNVlXa3hhMU16YkhSak1GSlRUak5vVjFwclZqTk9SM1JOVWxSb2NGSnFaM2xSTW5SMFpFYzBOVTR6Y0hkUmEzUnFZMnM1VkZScVduRmlNM0JtWldreFNsZElTbkJpYWtKR1ZrZGtiV1JFVms5a2JUUXpaVVphU1dGSE5WWlBTSEJxVGxZNWRXVkVWbGxoYmxweFlXMDVhV0l3ZUZaV2JEbFJWbTE0ZDAxR1dYZFBWV2haVlRGb2RVOVZjSE5aVjBwS1RtdHplVTF1Y0ZKVU1FVjFXa1p3WmxGdGJETldiRUp6VTBoSk1Wb3dlRzlYYms1Q1RqQm9ZVlZSTGtaT00zSjVaRkZZWDA4MU4wRkJTalY0WTIxaU9WQTBTVWhFUVhaMlIxQmpablpzZEhoaU1uWktRakFpTENKbGVIQWlPakUyT0RFeE9UWXpNRGtzSW1saGRDSTZNVFk0TVRFNU5qQXdPWDAuSnEwcnBxOGdzOF9FMElpbHA4QWJCUThILUduSzdENXkweWtqRXVGTEhaayIsImF1dGhvcml6ZWQiOnRydWUsImVtYWlsIjoiIiwibXNpc2RuIjoiNjI4MTIyMTk5NzQ1NiIsInVzZXIiOiJ3ZWMgdGVsa29tc2VsIn0.IijC8ysXx8LaVADu6JCPfBkb9ZA-bXgkpOXnalDkqgY"
	// fmt.Println(ValidateToken(authID))
	fmt.Println(ValidateXToken("eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJhdXRob3JpemVkIjp0cnVlLCJjdXN0X3R5cGUiOiJQcmVwYWlkIiwiZXhwIjoxNjgxMjk2MjUwLCJtc2lzZG4iOiI2MjgxMjIxOTk3NDU2IiwidXNlciI6IndlYyB0ZWxrb21zZWwifQ.zfQLpkpnAHm0mXv61VgrAC03HgGl7mc9uZ0uKp7h_TU"))
}

func ValidateJWT(accessToken string) (jwt.MapClaims, bool) {

	token, err := jwt.Parse(accessToken, func(token *jwt.Token) (interface{}, error) {

		if _, ok := token.Method.(*jwt.SigningMethodHMAC); !ok {

			return nil, errors.New("not valid")
		}

		return SECRET_KEY, nil
	})

	if err != nil {
		fmt.Println(err.Error())
		return nil, false
	}

	if claims, ok := token.Claims.(jwt.MapClaims); ok && token.Valid {

		json.Marshal(claims)
		fmt.Println("claims", claims["exp"].(float64))

		return claims, true

	} else {

		return nil, false
	}

}
func ValidateToken(token string) (jwt.MapClaims, bool) {
	secretKey := SECRET_KEY
	validateToken, err := jwt.Parse(token, func(token *jwt.Token) (interface{}, error) {
		_, ok := token.Method.(*jwt.SigningMethodHMAC)

		if !ok {
			return nil, errors.New("invalid token")
		}

		return []byte(secretKey), nil
	})

	if err != nil {
		return nil, false
	}

	if claims, ok := validateToken.Claims.(jwt.MapClaims); ok && validateToken.Valid {

		return claims, true

	} else {

		return nil, false
	}

}

func ValidateXToken(token string) (*jwt.Token, error) {
	secretKey := SECRET_KEY
	validateToken, err := jwt.Parse(token, func(token *jwt.Token) (interface{}, error) {
		_, ok := token.Method.(*jwt.SigningMethodHMAC)

		if !ok {
			return nil, errors.New("invalid token")
		}

		return []byte(secretKey), nil
	})

	if err != nil {
		return validateToken, err
	}

	return validateToken, nil
}
